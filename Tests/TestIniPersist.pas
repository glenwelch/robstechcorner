unit TestIniPersist;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, IniPersist, SysUtils, Classes, TypInfo, Rtti;

type
  TFoo = class(TObject)
  private
    FProp1: String;
    FProp2: Integer;
  public
    [IniValue('Test','Field1','Hello World')]
    FField1 : String;
    [IniValue('Test','Field2','0')]
    FField2 : Integer;
    [IniValue('Test','Field3','false')]
    FField3 : Boolean;
    [IniValue('Test','Prop1','')]
    property Prop1 : String read FProp1 write FProp1;
    [IniValue('Test','Prop2','-1')]
    property Prop2 : Integer read FProp2 write FProp2;
  end;

  TestTIniPersist = class(TTestCase)
  strict private
  private
    FileName : String;
  public
    procedure Setup; override;
    procedure TearDown; override;
  published
    procedure TestLoad;
    procedure TestLoad2;
    procedure TestSave;
  end;

implementation
uses IniFiles;


procedure TestTIniPersist.Setup;
begin
  inherited;
  FileName := ExtractFilePath(ParamStr(0)) + 'IniPersist.ini';
  DeleteFile(FileName);
end;

procedure TestTIniPersist.TearDown;
begin
  DeleteFile(FileName);
  inherited;
end;

procedure TestTIniPersist.TestLoad;
var
  obj: TFoo;
  Ini : TInifile;
begin
  obj := TFoo.Create;
  try
    TIniPersist.Load(FileName, obj);
    // Checking Default Values
    CheckEquals('Hello World',obj.FField1);
    CheckEquals(0,obj.FField2);
    CheckEquals(false,obj.FField3);
    CheckEquals('',obj.Prop1);
    CheckEquals(-1,obj.Prop2);
  finally
     obj.Free;
  end;
end;

procedure TestTIniPersist.TestLoad2;
var
  obj: TFoo;
  Ini : TInifile;
begin
  Ini := TIniFile.Create(FileName);
  Ini.WriteString('Test','Field1','TestValue');
  Ini.WriteString('Test','Field2','1234');
  Ini.WriteString('Test','Field3','true');
  Ini.WriteString('Test','Prop1','StrValue');
  Ini.WriteString('Test','Prop2','-1234');
  Ini.Free;
  obj := TFoo.Create;
  try
    TIniPersist.Load(FileName, obj);
    CheckEquals('TestValue',obj.FField1);
    CheckEquals(1234,obj.FField2);
    CheckEquals(true,obj.FField3);
    CheckEquals('StrValue',obj.Prop1);
    CheckEquals(-1234,obj.Prop2);
  finally
     obj.Free;
  end;
end;


procedure TestTIniPersist.TestSave;
var
  obj: TFoo;
  Ini : TInifile;
begin
  obj := TFoo.Create;
  try
    Obj.FField1 := 'a';
    Obj.FField2 := 4321;
    Obj.FField3 := false;
    Obj.Prop1   := 'b';
    Obj.Prop2   := -4321;
    TIniPersist.Save(FileName, obj);
  finally
     obj.Free;
  end;
  Ini := TIniFile.Create(FileName);
  try
    CheckEquals('a',Ini.ReadString('Test','Field1','~1~'));
    CheckEquals('4321',Ini.ReadString('Test','Field2','~2~'));
    CheckEquals('False',Ini.ReadString('Test','Field3','~3~'));
    CheckEquals('b',Ini.ReadString('Test','Prop1','~4~'));
    CheckEquals('-4321',Ini.ReadString('Test','Prop2','~5~'));
  finally
    Ini.Free;
  end;
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTIniPersist.Suite);
end.


