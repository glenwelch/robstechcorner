unit Testxmlserial;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}



interface

uses
  TestFramework, Generics.Defaults, XmlSerial, XmlIntf, TypInfo, Classes, RTTI, SysUtils,
  XmlDoc, Generics.Collections;

type

  //--------------------------------------------------------------------
  // Dummy Types to test RTTI information
  //(Don't change tests are dependant on order, and number of elements
  //--------------------------------------------------------------------
  TxmlEnum = (eOne,eTwo,eThree);
  TxmlSet = set of TxmlEnum;
  TxmlRecord = record
    I : Integer;
    Str : String;
    E : TxmlEnum;
    S : TxmlSet;
    AI : array of integer;
    AStr : array of String;
  end;
  TxmlTest = class(TObject)
  private
    FString: String;
    FFoo: Integer;
  public
    I : Integer;  // 0
    Str : String; // 1
    E : TxmlEnum; // 2
    S : TxmlSet;   // 3
    AI : array of integer; // 4
    ARec : array of TxmlRecord; // 5
    R : TxmlRecord; // 6
    property Foo : Integer read FFoo write FFoo; //7
    property Bar : String read FString write FString; //8
    property TestIgnored : string read FString;
    property TestIgnored2 : string write FString;
  end;

  TSimpleClass = class(TObject)
  public
    Field1 : String;
    Field2 : Integer;
  end;

  //--------------------------------------------------------------------
  // End of Dummy Types
  //--------------------------------------------------------------------



  // Test methods for class TTypeMapping
  TestTTypeMapping = class(TTestCase)
  strict private
    FTypeMapping: TTypeMapping;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestPopulate;
  end;
  // Test methods for class TXmlCustomTypeSerializer

  TestTXmlCustomTypeSerializer = class(TTestCase)
  strict private
  private

  public
  published
    procedure TestSerialize;
    procedure TestSerialize2;
    procedure TestSerialize3;
    procedure TestSerialize4;

    procedure TestDeserialize;
    procedure TestDeserialize2;
    procedure TestDeserialize3;
  end;



implementation

procedure TestTTypeMapping.SetUp;
begin
  FTypeMapping := TTypeMapping.Create;
end;

procedure TestTTypeMapping.TearDown;
begin
  FTypeMapping.Free;
  FTypeMapping := nil;
end;

procedure TestTTypeMapping.TestPopulate;
var
  aType: PTypeInfo;
  aContext: TRttiContext;
  lNameMarshler : TXmlDotNetNameMarshalling;
begin
  aContext := TRttiContext.Create;
  lNameMarshler := TXmlDotNetNameMarshalling.Create;
  FTypeMapping.Populate(aContext, TxmlTest.ClassInfo,lNameMarshler);
  CheckEquals('TxmlTest',FTypeMapping.Map.NodeName,'1');
  Check(FTypeMapping.Map.NodeType = TMemberNodeType.ntElement,'2');
  CheckEquals(9,Length(FTypeMapping.Map.List),'4');

  CheckEquals('I',FTypeMapping.Map.List[0].NodeName,'[0] - NodeName');
  Check(Assigned(FTypeMapping.Map.List[0].Member),'[0] - Member');
  CheckEquals('I',FTypeMapping.Map.List[0].Member.Name,'[0] - Member.Name');
  Check(FTypeMapping.Map.List[0].NodeType = TMemberNodeType.ntElement,'[0] - NodeType');
  CheckEquals(0,Length(FTypeMapping.Map.List[0].List),'[0] - List Length');

  CheckEquals('Str',FTypeMapping.Map.List[1].NodeName,'[1] - NodeName');
  Check(Assigned(FTypeMapping.Map.List[1].Member),'[1] - Member');
  CheckEquals('Str',FTypeMapping.Map.List[1].Member.Name,'[1] - Member.Name');
  Check(FTypeMapping.Map.List[1].NodeType = TMemberNodeType.ntElement,'[1] - NodeType');
  CheckEquals(0,Length(FTypeMapping.Map.List[1].List),'[1] - List Length');

  CheckEquals('E',FTypeMapping.Map.List[2].NodeName,'[2] - NodeName');
  Check(Assigned(FTypeMapping.Map.List[2].Member),'[2] - Member');
  CheckEquals('E',FTypeMapping.Map.List[2].Member.Name,'[2] - Member.Name');
  Check(FTypeMapping.Map.List[2].NodeType = TMemberNodeType.ntElement,'[2] - NodeType');
  CheckEquals(0,Length(FTypeMapping.Map.List[2].List),'[2] - List Length');

  CheckEquals('S',FTypeMapping.Map.List[3].NodeName,'[3] - NodeName');
  Check(Assigned(FTypeMapping.Map.List[3].Member),'[3] - Member');
  CheckEquals('S',FTypeMapping.Map.List[3].Member.Name,'[3] - Member.Name');
  Check(FTypeMapping.Map.List[3].NodeType = TMemberNodeType.ntElement,'[3] - NodeType');
  CheckEquals(0,Length(FTypeMapping.Map.List[3].List),'[3] - List Length');

  CheckEquals('AI',FTypeMapping.Map.List[4].NodeName,'[4] - NodeName');
  Check(Assigned(FTypeMapping.Map.List[4].Member),'[4] - Member');
  CheckEquals('AI',FTypeMapping.Map.List[4].Member.Name,'[4] - Member.Name');
  Check(FTypeMapping.Map.List[4].NodeType = TMemberNodeType.ntElement,'[4] - NodeType');
  CheckEquals(0,Length(FTypeMapping.Map.List[4].List),'[4] - List Length');

  CheckEquals('ARec',FTypeMapping.Map.List[5].NodeName,'[5] - NodeName');
  Check(Assigned(FTypeMapping.Map.List[5].Member),'[5] - Member');
  CheckEquals('ARec',FTypeMapping.Map.List[5].Member.Name,'[5] - Member.Name');
  Check(FTypeMapping.Map.List[5].NodeType = TMemberNodeType.ntElement,'[5] - NodeType');
  CheckEquals(6,Length(FTypeMapping.Map.List[5].List),'[5] - List Length');

  CheckEquals('R',FTypeMapping.Map.List[6].NodeName,'[6] - NodeName');
  Check(Assigned(FTypeMapping.Map.List[6].Member),'[6] - Member');
  CheckEquals('R',FTypeMapping.Map.List[6].Member.Name,'[6] - Member.Name');
  Check(FTypeMapping.Map.List[6].NodeType = TMemberNodeType.ntElement,'[6] - NodeType');
  CheckEquals(6,Length(FTypeMapping.Map.List[6].List),'[6] - List Length');

  CheckEquals('Foo',FTypeMapping.Map.List[7].NodeName,'[7] - NodeName');
  Check(Assigned(FTypeMapping.Map.List[7].Member),'[7] - Member');
  CheckEquals('Foo',FTypeMapping.Map.List[7].Member.Name,'[7] - Member.Name');
  Check(FTypeMapping.Map.List[7].NodeType = TMemberNodeType.ntElement,'[7] - NodeType');
  CheckEquals(0,Length(FTypeMapping.Map.List[7].List),'[7] - List Length');

  CheckEquals('Bar',FTypeMapping.Map.List[8].NodeName,'[8] - NodeName');
  Check(Assigned(FTypeMapping.Map.List[8].Member),'[8] - Member');
  CheckEquals('Bar',FTypeMapping.Map.List[8].Member.Name,'[8] - Member.Name');
  Check(FTypeMapping.Map.List[8].NodeType = TMemberNodeType.ntElement,'[8] - NodeType');
  CheckEquals(0,Length(FTypeMapping.Map.List[8].List),'[8] - List Length');
  aContext.Free;

  lNameMarshler.Free;
end;



{ TestTXmlCustomTypeSerializer }

procedure TestTXmlCustomTypeSerializer.TestDeserialize;
var
  s : TXmlTypeSerializer;
  v : TValue;
  t,tc : TSimpleClass;
  Doc : TXMLDocument;
  DummyOwner :  TComponent;
begin
  t := TSimpleClass.Create;
  t.Field1 := 'Blah';
  t.Field2 := 1234;
  s := TXmlTypeSerializer.Create(TSimpleClass.ClassInfo);
  DummyOwner :=  TComponent.Create(nil);
  Doc := TXMLDocument.Create(DummyOwner);

  s.Serialize(Doc,t);

//  Doc.SaveToFile('C:\test.xml');

  v := s.Deserialize(Doc);
  CheckFalse(v.IsEmpty,'Empty?');
  CheckTrue(v.IsObject,'Object?');
  CheckTrue(v.AsObject is TSimpleClass,'Correct Class?');
  tc := (v.AsObject as TSimpleClass);

  CheckEquals(t.Field1,tc.Field1);
  CheckEquals(t.Field2,tc.Field2);

  Doc.Free;
  DummyOwner.Free;
  t.Free;


end;

procedure TestTXmlCustomTypeSerializer.TestDeserialize2;
var
  s : TXmlTypeSerializer;
  v : TValue;
  t,tc : TxmlTest;
  Doc : TXMLDocument;
  DummyOwner :  TComponent;
begin
  t := TxmlTest.Create;
  t.I := 1234;
  t.Str := 'blah';
  t.E := eTwo;
  t.S := [eone,eThree];
  SetLength(T.AI,3);
  T.AI[0] := 234;
  T.AI[1] := 62234;
  T.AI[2] := 76844;
  t.R.I := -123;
  t.R.Str := '';
  t.R.E := eOne;
  T.R.S := [eOne];


  s := TXmlTypeSerializer.Create(TxmlTest.ClassInfo);
  DummyOwner :=  TComponent.Create(nil);
  Doc := TXMLDocument.Create(DummyOwner);

  s.Serialize(Doc,t);

  Doc.SaveToFile('C:\test.xml');

  v := s.Deserialize(Doc);
  CheckFalse(v.IsEmpty,'Empty?');
  CheckTrue(v.IsObject,'Object?');
  CheckTrue(v.AsObject is TxmlTest,'Correct Class?');
  tc := (v.AsObject as TxmlTest);

  CheckEquals(t.str,tc.str);
  CheckEquals(t.i,tc.i);
  CheckEquals(t.r.i,tc.r.I);
  CheckEquals(ord(t.r.E),ord(tc.r.e));
  CheckEquals(ord(t.E),ord(tc.e));
  CheckEquals(length(t.AI),length(tc.AI),'length(tc.ai)');
  CheckEquals(t.AI[0],t.AI[0],'AI[0]');
  CheckEquals(t.AI[1],t.AI[1],'AI[1]');
  CheckEquals(t.AI[2],t.AI[2],'AI[2]');

  Doc.Free;
  DummyOwner.Free;
  t.Free;


end;


procedure TestTXmlCustomTypeSerializer.TestDeserialize3;
var
  s : TXmlTypeSerializer;
  v : TValue;
  t,tc : TxmlTest;
  Doc : TXMLDocument;
  DummyOwner :  TComponent;
begin
  s := TXmlTypeSerializer.Create(TypeInfo(Integer));
  DummyOwner :=  TComponent.Create(nil);
  Doc := TXMLDocument.Create(DummyOwner);

  s.Serialize(Doc,1234);

//  Doc.SaveToFile('C:\test.xml');

  v := s.Deserialize(Doc);
  CheckTrue(V.IsOrdinal,'isOrdinal?');
  CheckEquals(1234,v.AsOrdinal);

  Doc.Free;
  DummyOwner.Free;
end;

procedure TestTXmlCustomTypeSerializer.TestSerialize;
var
  s : TXmlTypeSerializer;
  t : TSimpleClass;
  Doc : TXMLDocument;
  DummyOwner :  TComponent;
begin
  t := TSimpleClass.Create;
  t.Field1 := 'Blah';
  t.Field2 := 1234;
  s := TXmlTypeSerializer.Create(TSimpleClass.ClassInfo);
  DummyOwner :=  TComponent.Create(nil);
  Doc := TXMLDocument.Create(DummyOwner);


  s.Serialize(Doc,t);

//  Doc.SaveToFile('C:\test.xml');

  Doc.Free;
  DummyOwner.Free;
  t.Free;


end;

procedure TestTXmlCustomTypeSerializer.TestSerialize2;
var
  s : TXmlTypeSerializer;
  t : TXmlTest;
  Doc : TXMLDocument;
  DummyOwner :  TComponent;
begin
  t := TXmlTest.Create;
  t.I := 1234;
  t.E := eTwo;
  t.S := [etwo,eThree];

  s := TXmlTypeSerializer.Create(TXmlTest.ClassInfo);
  DummyOwner :=  TComponent.Create(nil);
  Doc := TXMLDocument.Create(DummyOwner);


  s.Serialize(Doc,t);

//  Doc.SaveToFile('C:\test.xml');

  Doc.Free;
  DummyOwner.Free;
  t.Free;
end;

procedure TestTXmlCustomTypeSerializer.TestSerialize3;
var
  s : TXmlTypeSerializer;
  Doc : TXMLDocument;
  DummyOwner :  TComponent;
begin
  s := TXmlTypeSerializer.Create(TypeInfo(Integer));
  DummyOwner :=  TComponent.Create(nil);
  Doc := TXMLDocument.Create(DummyOwner);


  s.Serialize(Doc,1);

//  Doc.SaveToFile('C:\test.xml');

  Doc.Free;
  DummyOwner.Free;
end;

procedure TestTXmlCustomTypeSerializer.TestSerialize4;
var
  s : TXmlTypeSerializer;
  Doc : TXMLDocument;
  DummyOwner :  TComponent;
begin
  s := TXmlTypeSerializer.Create(TypeInfo(String));
  DummyOwner :=  TComponent.Create(nil);
  Doc := TXMLDocument.Create(DummyOwner);


  s.Serialize(Doc,'StringWith<>//asdf !-- Characters in it</>');

//  Doc.SaveToFile('C:\test.xml');

  Doc.Free;
  DummyOwner.Free;
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTTypeMapping.Suite);
  RegisterTest(TestTXmlCustomTypeSerializer.Suite);
end.

